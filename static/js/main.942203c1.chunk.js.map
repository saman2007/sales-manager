{"version":3,"sources":["components/AddSales.js","components/ChartBar.js","components/Chart.js","components/Sales.js","components/Filter.js","components/SaleCard.js","App.js","reportWebVitals.js","index.js"],"names":["AddSales","props","useState","prName","setPrName","prPrice","setPrValue","prDate","setPrDate","prNumber","setPrNumber","className","onSubmit","e","preventDefault","addSale","name","value","AllValue","number","Math","round","date","htmlFor","id","placeholder","required","type","onChange","target","min","step","Number","max","ChartBar","style","height","sale_number","month","Chart","chartBars","counter","Date","push","toLocaleString","monthlySales","Sales","children","Filter","onFilterChange","SaleCard","color","toFixed","App","sales","setSales","filter","setFilter","salesCard","allMoney","length","map","sale","element","index","forEach","splitedDate","split","filteredSales","includes","newSale","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.942203c1.chunk.js","sourcesContent":["//import use state from react and css file\r\nimport {useState} from \"react\";\r\nimport \"../styles/AddSales.css\";\r\n\r\nfunction AddSales(props) {\r\n    //product name, value, date and number of products\r\n    const [prName, setPrName] = useState(\"\");\r\n    const [prPrice, setPrValue] = useState(\"\");\r\n    const [prDate, setPrDate] = useState(\"\");\r\n    const [prNumber, setPrNumber] = useState(1);\r\n\r\n    return (\r\n        //send all states and allValue to the main component when user submit the form\r\n        <form className=\"add_sales_container\" onSubmit= {(e) => {e.preventDefault(); props.addSale({name: prName, value: prPrice, AllValue: prPrice * prNumber, number: Math.round(prNumber), date: prDate})}}>\r\n            <label htmlFor=\"product_name\">your product name:</label>\r\n            <input id=\"product_name\" placeholder=\"enter your product name\" required type=\"text\" onChange={(e) => setPrName(e.target.value)} />\r\n            <label htmlFor=\"product_price\">your product price:</label>\r\n            <input id=\"product_price\" placeholder=\"enter your product value\" required type=\"number\" min={0.01} step={0.01} onChange={(e) => setPrValue(Number(e.target.value))} />\r\n            <label htmlFor=\"product_number\">your number of product:</label>\r\n            <input id=\"product_number\" placeholder=\"enter your number of product\" type=\"number\" onChange={(e) => setPrNumber(Number(e.target.value))} />\r\n            <label htmlFor=\"soled_date\">sold date:</label>\r\n            <input type=\"date\" id=\"soled_date\" min='2019-01-01' max='2021-12-31' required onChange={(e) => setPrDate(e.target.value)} />\r\n            <button className=\"submit\" type=\"submit\">Submit</button>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default AddSales;","//import the style file\r\nimport \"../styles/ChartBar.css\";\r\n\r\nfunction ChartBar(props) {\r\n    return(\r\n        /*\r\n        chart container contain a chart bar, number of sales and month name\r\n        chart bar contain a chart fill that shows the percent of sales in a month\r\n        */\r\n        <div className=\"chart_bar\">\r\n            <div className=\"chart_inner\">\r\n                <div className=\"chart_fill\" style={{height: props.value}}></div>\r\n            </div>\r\n            <div className=\"hide_info\">{props.sale_number}</div>\r\n            <p>{props.month}</p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ChartBar;","//import styles and chart bars\r\nimport \"../styles/Chart.css\";\r\nimport ChartBar from \"./ChartBar\";\r\n\r\nfunction Chart(props) {\r\n    let chartBars = [];\r\n    //to create 12 chart bars with 12 months in a year\r\n    for (let counter = 0; counter < 12; counter++) {\r\n        //create a date obj and set the counter as a month\r\n        let date = new Date(2020, counter, 1);\r\n        //set the short name of a month in JSx and some other things and then push the JSX in the chartBars variable\r\n        chartBars.push(<ChartBar month={date.toLocaleString('en-us', { month: 'short' })} value={props.monthlySales[counter] + \"%\"} sale_number={props.monthlySales[counter]} key={counter}></ChartBar>)\r\n    }\r\n    return(\r\n        <div className=\"chart\">\r\n            {chartBars}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Chart;","//import styles\r\nimport \"../styles/Sales.css\"\r\n\r\nfunction Sales(props) {\r\n    //sale cards container\r\n    return(\r\n    <div className=\"sales_container\">\r\n        {props.children}\r\n    </div>\r\n    )\r\n}\r\n\r\nexport default Sales;","//import the style file\r\nimport \"../styles/Filter.css\"\r\n\r\nfunction Filter(props) {\r\n    return(\r\n        //filter\r\n        <select className=\"filter\" onChange={e => {props.onFilterChange(e.target.value)}}>\r\n            <option>All</option>\r\n            <option>2021</option>\r\n            <option>2020</option>\r\n            <option>2019</option>\r\n        </select>\r\n    )\r\n}\r\n\r\nexport default Filter;","//import styles\r\nimport \"../styles/SaleCard.css\"\r\n\r\nfunction SaleCard(props) {\r\n    //sale card component that contain name, value, number, allValue and date\r\n    return(\r\n        <div className=\"sale_card\">\r\n            <p><span style={{color: \"black\"}}>name:</span> {props.name}</p>\r\n            <p><span style={{color: \"black\"}}>value:</span> {props.value.toFixed(2)}</p>\r\n            <p><span style={{color: \"black\"}}>number:</span> {Math.round(props.number)}</p>\r\n            <p><span style={{color: \"black\"}}>All Value:</span> {props.AllValue.toFixed(2)}</p>\r\n            <p><span style={{color: \"black\"}}>date:</span> {props.date}</p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SaleCard;","// import components and styles\nimport AddSales from \"./components/AddSales\";\nimport \"./App.css\";\nimport Chart from \"./components/Chart\";\nimport Sales from \"./components/Sales\";\nimport Filter from \"./components/Filter\";\nimport SaleCard from \"./components/SaleCard\";\nimport { useState } from \"react\";\n\n\nfunction App() {\n  //states\n  const [sales, setSales]= useState([]);\n  const [filter, setFilter] = useState(\"All\");\n  //an array to store monthly sales\n  let monthlySales = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];\n  //to store sales card or \"no sales found\"\n  let salesCard = <p>no sales found!</p>;\n  //to store sum of sales prices\n  let allMoney = 0;\n  //filter condition\n  if (sales.length > 0) {\n    //show all the sales if the filter is on All\n    if (filter === \"All\") {\n      sales.map(sale => (allMoney += sale.AllValue))\n      salesCard = sales.map((element, index) => (\n        <SaleCard name={element.name} value={element.value} AllValue={element.AllValue} date={element.date} number={element.number} key={index}/>\n      ))\n      sales.forEach(sale => {\n        let splitedDate = sale.date.split(\"-\");\n        monthlySales[Number(splitedDate[1]) - 1] += sale.number;\n      });\n      //show sales with specific date if the filter is on 2019, 2020 or 2021\n    } else if(filter === \"2021\" || filter === \"2020\" || filter === \"2019\") {\n      //store filtered objects\n      let filteredSales = sales.filter(sale => sale.date.includes(filter));\n      //store sum of stored prices\n      filteredSales.forEach(sale => {\n        allMoney += sale.AllValue;\n      });\n      //map filtered sales objects\n      salesCard = filteredSales.map((element, index) => (\n        <SaleCard name={element.name} value={element.value} AllValue={element.AllValue} date={element.date} number={element.number} key={index}/>\n      ))\n      /* split objects dates and get the month number and add the number\n       of soled products to the month index in monthlySales */ \n      filteredSales.forEach(sale => {\n        let splitedDate = sale.date.split(\"-\");\n        monthlySales[Number(splitedDate[1]) - 1] += sale.number;\n      });\n    }\n    if (salesCard.length === 0) {\n      salesCard = <p>no sales found!</p>;\n    }\n  }\n  return (\n    <div className=\"container\">\n      <AddSales addSale={(newSale) => {setSales([newSale, ...sales])}}></AddSales>     \n      <Chart monthlySales={monthlySales}></Chart>\n      <Sales>\n        <Filter onFilterChange={setFilter}></Filter>\n        {salesCard}\n        <p>all money: {allMoney.toFixed(2)}</p>\n      </Sales>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport \"./reset.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}